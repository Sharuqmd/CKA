Core topics

1. Kubernetes Cluster and Node Setup
2. Role-Based Access Control (RBAC)
3. Authentication and Authorization
4. Network Policies
5. Pod Security Standards (PSS) and Pod Security Policies (PSP)
6. Managing Secrets and ConfigMaps
7. Node Security and Hardening
8. Resource Quotas and Limits
9. Audit Logs and Monitoring
10. Security Tools and Image Scanning
11. Backup and Disaster Recovery
12. TLS and Certificate Management
13. Network Security and External Access


Mostly used impernative commands:

kubectl config current-context
kubectl config get-contexts
kubectl config use-context <context-name>
kubectl config set-context --current --namespace=<namespace>
kubectl config set-context <context-name> --cluster=<cluster-name> --user=<user-name> --namespace=<namespace>
kubectl config delete-context <context-name>
kubectl config view
kubectl config rename-context <old-context-name> <new-context-name>

Commonly Used Kubernetes Commands

    Create Resources
        kubectl create namespace <namespace>
        kubectl create deployment <name> --image=<image>
        kubectl create service <type> <name> --tcp=<port>:<targetPort>

    Apply Configurations
        kubectl apply -f <file.yaml>

    Get Resources
        kubectl get pods
        kubectl get services
        kubectl get deployments
        kubectl get all

    Describe Resources
        kubectl describe pod <pod-name>
        kubectl describe service <service-name>

    Delete Resources
        kubectl delete pod <pod-name>
        kubectl delete service <service-name>
        kubectl delete deployment <deployment-name>

    View Logs
        kubectl logs <pod-name>
        kubectl logs <pod-name> -c <container-name>

    Execute Commands in Containers
        kubectl exec -it <pod-name> -- <command>

    Scale Resources
        kubectl scale deployment <deployment-name> --replicas=<number>

    Port Forwarding
        kubectl port-forward <pod-name> <local-port>:<pod-port>

    Update Resource Images
        kubectl set image deployment/<deployment-name> <container-name>=<new-image>

    Copy Files
        kubectl cp <pod-name>:/path/to/file /local/path
        kubectl cp /local/path <pod-name>:/path/to/file

    Monitor Resource Usage
        kubectl top pods
        kubectl top nodes



SSL TLS certificate 
Example:- In this case we have 2 servers one is client server and another one is browser server. 
## From the browser server when the https request given to the client server, 
we need to send encrypted data from browser end so we encrypt this with public and private key now the data is encrypted 
Now when the https request is sent to client server it will give public key then broweser receives it and encrypt the already encrypted data 
then the data transmitted to client server now both the server have private key so any messages can be encrypted and decrypted in both the side 

## Now we need to know that server is ligit so adding client certificate to the public key passing stage that Certificate is signed by CA like symentac companies 
no we have public key and ca certificate form server send it to browser and browser will verify it and allow request 
how do browser knows that its ligit CA for that ca signers like symentac will create one pair of pub and priv key thos pub key will be installed in browser default

## 

